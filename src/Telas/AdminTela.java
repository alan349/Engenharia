/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import Entidades.Acessos;
import Entidades.Atendimento;
import Entidades.AtendimentoPK;
import Entidades.Paciente;
import Entidades.Usuario;
import Repositorios.AcessosRepositorio;
import Repositorios.AtendimentoRepositorio;
import Repositorios.PacienteRepositorio;
import Repositorios.UsuarioRepositorio;
import com.github.lgooddatepicker.components.CalendarPanel;
import com.jgoodies.looks.plastic.Plastic3DLookAndFeel;
import com.jgoodies.looks.plastic.PlasticLookAndFeel;
import com.jgoodies.looks.plastic.PlasticXPLookAndFeel;
import com.jgoodies.looks.windows.WindowsLookAndFeel;
import java.awt.Rectangle;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import static net.sf.dynamicreports.report.builder.DynamicReports.*;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import net.sf.dynamicreports.jasper.builder.export.Exporters;
import net.sf.dynamicreports.report.builder.style.StyleBuilder;
import net.sf.dynamicreports.report.constant.HorizontalTextAlignment;
import net.sf.dynamicreports.report.datasource.DRDataSource;
import net.sf.dynamicreports.report.exception.DRException;
import net.sf.jasperreports.engine.JRDataSource;

/**
 *
 * @author Alan
 */
public class AdminTela extends javax.swing.JFrame {

    public static String user;
    private static boolean alterarUsuario = false, alterarPaciente = false, alterarAtendimento = false;
    private static boolean excluirUsuario = false, excluirAtendimento = false;

    /**
     * Creates new form AdminTela
     */
    public AdminTela(String usuario) {
        user = usuario;
        initComponents();
        TabelaUsuario();
        TabelaPaciente();
        ListaMedico();
        ListaEspecialidade();
        ListaPDF();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jpUsuario = new javax.swing.JPanel();
        btnInsUsuario = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbUsuarios = new javax.swing.JTable();
        txtCpfUsuario = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnAltUsuario = new javax.swing.JToggleButton();
        lblCpfUsuario = new javax.swing.JLabel();
        btnExcUsuario = new javax.swing.JToggleButton();
        jpPaciente = new javax.swing.JPanel();
        btnInsPaciente = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbPacientes = new javax.swing.JTable();
        txtCpfPaciente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnAltPaciente = new javax.swing.JToggleButton();
        lblCpfPaciente = new javax.swing.JLabel();
        jpAgendamento = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jltMedico = new javax.swing.JList<>();
        calendarData = new com.github.lgooddatepicker.components.CalendarPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jltHora = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbAtendimento = new javax.swing.JTable();
        btnAgendar = new javax.swing.JButton();
        btnAltAgenda = new javax.swing.JToggleButton();
        txtData = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jbData = new javax.swing.JRadioButton();
        jbPaciente = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        btnExcAtendimento = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        jpRelatorio = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane6 = new javax.swing.JScrollPane();
        jltPDF = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        calendarAcesso = new com.github.lgooddatepicker.components.CalendarPanel();
        jLabel6 = new javax.swing.JLabel();
        btnReportAcessos = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        calendarDiario = new com.github.lgooddatepicker.components.CalendarPanel();
        btnReportDiario = new javax.swing.JButton();
        calendarEspecialidade = new com.github.lgooddatepicker.components.CalendarPanel();
        jLabel9 = new javax.swing.JLabel();
        btnReportEspec = new javax.swing.JButton();
        jbAnual = new javax.swing.JRadioButton();
        jbMensal = new javax.swing.JRadioButton();
        jbDiario = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(960, 540));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jpUsuario.setPreferredSize(new java.awt.Dimension(640, 480));

        btnInsUsuario.setLabel("Inserir");
        btnInsUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInsUsuarioMouseClicked(evt);
            }
        });

        tbUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Usuario", "Senha", "N.P.", "CPF", "RG"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbUsuarios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbUsuarios.getTableHeader().setReorderingAllowed(false);
        tbUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbUsuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbUsuarios);

        txtCpfUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCpfUsuarioKeyReleased(evt);
            }
        });

        jLabel1.setText("Digite o CPF do Usuário desejado:");

        btnAltUsuario.setText("Habilitar Alterações");
        btnAltUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAltUsuarioMouseClicked(evt);
            }
        });

        lblCpfUsuario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btnExcUsuario.setText("Excluir");
        btnExcUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExcUsuarioMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jpUsuarioLayout = new javax.swing.GroupLayout(jpUsuario);
        jpUsuario.setLayout(jpUsuarioLayout);
        jpUsuarioLayout.setHorizontalGroup(
            jpUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpUsuarioLayout.createSequentialGroup()
                .addGroup(jpUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpUsuarioLayout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(lblCpfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpUsuarioLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jpUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 825, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpUsuarioLayout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtCpfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15))
                            .addGroup(jpUsuarioLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(btnInsUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(207, 207, 207)
                                .addComponent(btnAltUsuario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExcUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jpUsuarioLayout.setVerticalGroup(
            jpUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpUsuarioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCpfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCpfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jpUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsUsuario)
                    .addComponent(btnAltUsuario)
                    .addComponent(btnExcUsuario))
                .addGap(37, 37, 37))
        );

        jTabbedPane1.addTab("Usuários", jpUsuario);

        btnInsPaciente.setLabel("Inserir");
        btnInsPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInsPacienteMouseClicked(evt);
            }
        });

        tbPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "CPF", "SUS", "Data Nasc.", "Endereço", "Fone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbPacientes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbPacientes.getTableHeader().setReorderingAllowed(false);
        tbPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPacientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbPacientes);

        txtCpfPaciente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCpfPacienteKeyReleased(evt);
            }
        });

        jLabel2.setText("Digite o CPF do Paciente desejado:");

        btnAltPaciente.setText("Habilitar Alterações");
        btnAltPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAltPacienteMouseClicked(evt);
            }
        });

        lblCpfPaciente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jpPacienteLayout = new javax.swing.GroupLayout(jpPaciente);
        jpPaciente.setLayout(jpPacienteLayout);
        jpPacienteLayout.setHorizontalGroup(
            jpPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPacienteLayout.createSequentialGroup()
                .addGroup(jpPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpPacienteLayout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCpfPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addGroup(jpPacienteLayout.createSequentialGroup()
                        .addGroup(jpPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpPacienteLayout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addComponent(lblCpfPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpPacienteLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpPacienteLayout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(btnInsPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAltPaciente)
                .addGap(191, 191, 191))
        );
        jpPacienteLayout.setVerticalGroup(
            jpPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpPacienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCpfPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCpfPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jpPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAltPaciente)
                    .addComponent(btnInsPaciente)))
        );

        jTabbedPane1.addTab("Pacientes", jpPaciente);

        jltMedico.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jltMedico.setPreferredSize(new java.awt.Dimension(250, 0));
        jltMedico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltMedicoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jltMedico);

        calendarData.setSelectedDate(LocalDate.now());
        calendarData.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarDataPropertyChange(evt);
            }
        });

        jltHora.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jltHora.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jltHora.setSelectedIndex(0);
        jScrollPane4.setViewportView(jltHora);

        tbAtendimento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Hora", "Paciente"
            }
        ));
        tbAtendimento.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbAtendimento.getTableHeader().setReorderingAllowed(false);
        tbAtendimento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbAtendimentoMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tbAtendimento);

        btnAgendar.setText("Agendar");
        btnAgendar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgendarMouseClicked(evt);
            }
        });

        btnAltAgenda.setText("Habilitar Alterações");
        btnAltAgenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAltAgendaMouseClicked(evt);
            }
        });

        txtData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDataKeyReleased(evt);
            }
        });

        jLabel3.setText("Buscar por:");

        jLabel4.setText("Médicos:");

        buttonGroup1.add(jbData);
        jbData.setSelected(true);
        jbData.setText("Data");
        jbData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbDataMouseClicked(evt);
            }
        });
        jbData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDataActionPerformed(evt);
            }
        });

        buttonGroup1.add(jbPaciente);
        jbPaciente.setText("Paciente");
        jbPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbPacienteMouseClicked(evt);
            }
        });

        jLabel5.setText("Digite o dado desejado:");

        btnExcAtendimento.setText("Excluir");
        btnExcAtendimento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExcAtendimentoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jpAgendamentoLayout = new javax.swing.GroupLayout(jpAgendamento);
        jpAgendamento.setLayout(jpAgendamentoLayout);
        jpAgendamentoLayout.setHorizontalGroup(
            jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAgendamentoLayout.createSequentialGroup()
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel3))
                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jbData)
                        .addGap(10, 10, 10)
                        .addComponent(jbPaciente)))
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(209, 209, 209)
                        .addComponent(btnAltAgenda)
                        .addGap(30, 30, 30))
                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExcAtendimento)
                        .addGap(59, 59, 59))))
            .addGroup(jpAgendamentoLayout.createSequentialGroup()
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)
                                .addComponent(calendarData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(btnAgendar)
                                .addGap(19, 19, 19))))
                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5)))
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        jpAgendamentoLayout.setVerticalGroup(
            jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAgendamentoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(calendarData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAgendamentoLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAgendar)
                                .addGap(84, 84, 84))))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(btnAltAgenda)
                    .addComponent(jLabel3))
                .addGap(0, 0, 0)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbData)
                    .addComponent(jbPaciente)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcAtendimento))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Agendamentos", jpAgendamento);

        jltPDF.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jltPDF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltPDFMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jltPDF);

        jLabel8.setText("Relatórios Salvos:");
        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        calendarAcesso.setSelectedDate(LocalDate.now());
        calendarAcesso.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarAcessoPropertyChange(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Relatório de Acessos:");
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        btnReportAcessos.setText("Gerar Relatório");
        btnReportAcessos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReportAcessosMouseClicked(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Relatório de Atendimentos Diários:");
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        calendarDiario.setSelectedDate(LocalDate.now());
        calendarDiario.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarDiarioPropertyChange(evt);
            }
        });

        btnReportDiario.setText("Gerar Relatório");
        btnReportDiario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReportDiarioMouseClicked(evt);
            }
        });

        calendarEspecialidade.setSelectedDate(LocalDate.now());
        calendarEspecialidade.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarEspecialidadePropertyChange(evt);
            }
        });

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Relatório de Atendimento por Especialidade:");
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        btnReportEspec.setText("Gerar Relatório");
        btnReportEspec.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReportEspecMouseClicked(evt);
            }
        });

        jbAnual.setSelected(true);
        jbAnual.setText("Anual");

        jbMensal.setText("Mensal");

        jbDiario.setText("Diário");

        javax.swing.GroupLayout jpRelatorioLayout = new javax.swing.GroupLayout(jpRelatorio);
        jpRelatorio.setLayout(jpRelatorioLayout);
        jpRelatorioLayout.setHorizontalGroup(
            jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpRelatorioLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jpRelatorioLayout.createSequentialGroup()
                .addGroup(jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpRelatorioLayout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(btnReportAcessos))
                    .addGroup(jpRelatorioLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(calendarAcesso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(29, 29, 29)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpRelatorioLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jpRelatorioLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpRelatorioLayout.createSequentialGroup()
                                        .addComponent(calendarEspecialidade, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                                        .addGap(23, 23, 23))
                                    .addGroup(jpRelatorioLayout.createSequentialGroup()
                                        .addComponent(jbAnual)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jbMensal)
                                        .addGap(26, 26, 26)
                                        .addComponent(jbDiario)
                                        .addGap(33, 33, 33)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpRelatorioLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReportEspec)
                        .addGap(87, 87, 87)))
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calendarDiario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpRelatorioLayout.createSequentialGroup()
                        .addComponent(btnReportDiario)
                        .addGap(60, 60, 60)))
                .addGap(25, 25, 25))
        );
        jpRelatorioLayout.setVerticalGroup(
            jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRelatorioLayout.createSequentialGroup()
                .addGroup(jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpRelatorioLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpRelatorioLayout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(calendarAcesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(27, 27, 27)
                                    .addComponent(btnReportAcessos))
                                .addGroup(jpRelatorioLayout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(calendarDiario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(27, 27, 27)
                                    .addComponent(btnReportDiario)))
                            .addGroup(jpRelatorioLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(calendarEspecialidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jbAnual)
                                    .addComponent(jbMensal)
                                    .addComponent(jbDiario))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnReportEspec)))))
                .addGap(0, 0, 0)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jpRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpRelatorioLayout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpRelatorioLayout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(jLabel8)
                        .addGap(123, 123, 123))))
        );

        jTabbedPane1.addTab("Relatórios", jpRelatorio);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        if (!jpPaciente.isShowing() && alterarPaciente == true) {
            alterarPaciente = false;
            btnAltPaciente.setSelected(false);
            btnAltPaciente.setText("Habilitar Alterações");
        }

        if (!jpUsuario.isShowing() && alterarUsuario == true) {
            alterarUsuario = false;
            btnAltUsuario.setSelected(false);
            btnAltUsuario.setText("Habilitar Alterações");
        }

        if (!jpAgendamento.isShowing() && alterarAtendimento == true) {
            alterarAtendimento = false;
            btnAltAgenda.setSelected(false);
            btnAltAgenda.setText("Habilitar Alterações");
        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void btnExcAtendimentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExcAtendimentoMouseClicked
        // TODO add your handling code here:
        if (btnAltAgenda.isSelected() == false) {
            if (btnExcAtendimento.isSelected() == true) {
                JOptionPane.showMessageDialog(null, "Clique no partido que deseja excluir.");
                btnExcAtendimento.setText("Cancelar Exclusão");
                excluirAtendimento = true;
            } else {
                btnExcAtendimento.setText("Excluir");
                excluirAtendimento = false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Primeiramente desative as alterações para habilitar exclusões.");
            btnExcAtendimento.setSelected(false);
        }
    }//GEN-LAST:event_btnExcAtendimentoMouseClicked

    private void jbPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbPacienteMouseClicked
        // TODO add your handling code here:
        txtData.setText(null);
    }//GEN-LAST:event_jbPacienteMouseClicked

    private void jbDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbDataActionPerformed

    private void jbDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbDataMouseClicked
        // TODO add your handling code here:
        txtData.setText(null);
    }//GEN-LAST:event_jbDataMouseClicked

    private void txtDataKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataKeyReleased
        // TODO add your handling code here:
        String medico = jltMedico.getSelectedValue();
        if (jbData.isSelected()) {
            if (txtData.getText().length() == 10 && tbAtendimento.getRowCount() != 0) {
                TabelaAtendimento(medico);
            }
        } else if (jbPaciente.isSelected() && tbAtendimento.getRowCount() != 0) {
            TabelaAtendimento(medico);
        }
        if (txtData.getText().isEmpty() && tbAtendimento.getRowCount() != 0) {
            TabelaAtendimento(medico);
        }

        Integer rows = tbAtendimento.getRowCount();
        Integer col = null;
        for (int i = 0; i < rows; i++) {
            if (jbData.isSelected()) {
                col = 0;
            } else if (jbPaciente.isSelected()) {
                col = 2;
            }
            if (tbAtendimento.getValueAt(i, col).equals(txtData.getText())) {
                tbAtendimento.setRowSelectionInterval(i, i);
                tbAtendimento.scrollRectToVisible(new Rectangle(tbAtendimento.getCellRect(i, 0, true)));
                Thread.currentThread().stop();
            } else {
            }

        }
    }//GEN-LAST:event_txtDataKeyReleased

    private void btnAltAgendaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAltAgendaMouseClicked
        // TODO add your handling code here:
        if (btnExcAtendimento.isSelected() == false) {
            if (btnAltAgenda.isSelected() == true) {
                JOptionPane.showMessageDialog(null, "Clique no campo que deseja alterar.");
                btnAltAgenda.setText("Desabilitar Alterações");
                alterarAtendimento = true;
            } else {
                btnAltAgenda.setText("Habilitar Alterações");
                alterarAtendimento = false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Primeiramente cancele a exclusão para habilitar alterações.");
            btnAltAgenda.setSelected(false);
        }
    }//GEN-LAST:event_btnAltAgendaMouseClicked

    private void btnAgendarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgendarMouseClicked
        // TODO add your handling code here:
        Atendimento atendimento = new Atendimento();
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        AtendimentoPK atendimentoPK = new AtendimentoPK();
        PacienteRepositorio pacienteRepositorio = new PacienteRepositorio();
        Usuario usuario = new Usuario();
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();

        if (jltHora.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Primeiramente selecione um horário.");
            Thread.currentThread().stop();
        }

        LocalDate selDate = calendarData.getSelectedDate();

        if (selDate.isBefore(LocalDate.now())) {
            JOptionPane.showMessageDialog(null, "Selecione uma data superior ou igual a data atual.");
            cancelar();
            Thread.currentThread().stop();
        }

        String formatted = selDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

        atendimentoPK.setData(formatted);
        String hora = jltHora.getSelectedValue();
        if (hora.charAt(0) == '<') {
            JOptionPane.showMessageDialog(null, "Já existe uma consulta agendada neste horário!");
            Thread.currentThread().stop();
        }
        atendimentoPK.setHora(hora);
        atendimentoPK.setMedico(jltMedico.getSelectedValue());
        usuario = usuarioRepositorio.buscarPorNome(jltMedico.getSelectedValue());
        atendimento.setEspecialidade(usuario.getEspecialidade());
        atendimento.setId(atendimentoPK);
        String cpf = JOptionPane.showInputDialog(null, "Digite o CPF do Paciente desejado:");
        if (cpf == null || cpf.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhum paciente com este CPF foi encontrado.");
            Thread.currentThread().stop();
        }
        Paciente paciente = pacienteRepositorio.buscarPorCpf(cpf);
        if (paciente == null) {
            JOptionPane.showMessageDialog(null, "Nenhum Paciente com este CPF foi encontrado.");
            Thread.currentThread().stop();
        }
        atendimento.setPaciente(paciente);
        atendimentoRepositorio.inserir(atendimento);
        TabelaAtendimento(jltMedico.getSelectedValue());
    }//GEN-LAST:event_btnAgendarMouseClicked

    private void tbAtendimentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAtendimentoMouseClicked
        // TODO add your handling code here:
        if (alterarAtendimento == true) {
            AlterarAtendimento();
        } else if (excluirAtendimento == true) {
            ExcluirAtendimento();
        }
    }//GEN-LAST:event_tbAtendimentoMouseClicked

    private void calendarDataPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarDataPropertyChange
        // TODO add your handling code here:
        if (jpAgendamento.isShowing()) {
            if (calendarData.getSelectedDate() != null) {
                if (jltMedico.isSelectionEmpty()) {

                    Thread.currentThread().stop();
                } else {
                    horarios();
                }
            } else {
                calendarData.setSelectedDate(LocalDate.now());
            }
        }
    }//GEN-LAST:event_calendarDataPropertyChange

    private void jltMedicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltMedicoMouseClicked
        // TODO add your handling code here:
        TabelaAtendimento(jltMedico.getSelectedValue());
    }//GEN-LAST:event_jltMedicoMouseClicked

    private void btnAltPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAltPacienteMouseClicked
        // TODO add your handling code here:
        if (btnAltPaciente.isSelected() == true) {
            JOptionPane.showMessageDialog(null, "Clique no campo que deseja alterar.");
            btnAltPaciente.setText("Desabilitar Alterações");
            alterarPaciente = true;
        } else {
            btnAltPaciente.setText("Habilitar Alterações");
            alterarPaciente = false;
        }
    }//GEN-LAST:event_btnAltPacienteMouseClicked

    private void txtCpfPacienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpfPacienteKeyReleased
        // TODO add your handling code here:
        Integer rows = tbPacientes.getRowCount();
        for (int i = 0; i < rows; i++) {
            if (tbPacientes.getValueAt(i, 1).equals(txtCpfPaciente.getText())) {
                tbPacientes.setRowSelectionInterval(i, i);
                tbPacientes.scrollRectToVisible(new Rectangle(tbPacientes.getCellRect(i, 0, true)));
                lblCpfPaciente.setText("Paciente encontrado.");
                Thread.currentThread().stop();
            } else {
                lblCpfPaciente.setText("Nenhum Paciente com este CPF foi encontrado.");
            }
            if (txtCpfPaciente.getText().equals("")) {
                lblCpfPaciente.setText(null);
            }
        }
    }//GEN-LAST:event_txtCpfPacienteKeyReleased

    private void tbPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPacientesMouseClicked
        // TODO add your handling code here:
        if (alterarPaciente == true) {
            AlterarPaciente();
        }
    }//GEN-LAST:event_tbPacientesMouseClicked

    private void btnInsPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsPacienteMouseClicked
        // TODO add your handling code here:
        PacienteRepositorio pacienteRepositorio = new PacienteRepositorio();
        Paciente paciente = new Paciente();
        String nome = null;
        Boolean nomeV = false;
        while (nomeV == false) {
            nome = JOptionPane.showInputDialog("Insira o Nome:");
            if (nome == null || nome.isEmpty()) {
                cancelar();
                Thread.currentThread().stop();
            }
            if (!Character.isLetter(nome.charAt(0))) {
                JOptionPane.showMessageDialog(null, "O nome deve ser iniciado com uma letra.");
            } else {
                nomeV = true;
            }
        }
        paciente.setNome(nome);
        String cpf = null;
        Boolean cpfV = false;
        while (cpfV == false) {
            cpf = JOptionPane.showInputDialog("Insira o CPF:");
            if (cpf == null || cpf.isEmpty()) {
                cancelar();
                Thread.currentThread().stop();
            } else if (AdminTela.isValidCPF(cpf) == false) {
                JOptionPane.showMessageDialog(null, "Digite um CPF válido.");
            } else {
                cpfV = true;
            }
        }
        paciente.setCPF(cpf);
        String sus = JOptionPane.showInputDialog("Insira o número do CNS:");
        if (sus == null || sus.isEmpty()) {
            cancelar();
            Thread.currentThread().stop();
        }
        paciente.setSUS(sus);

        Boolean dataV = false;
        String data = null;
        while (dataV == false) {

            data = JOptionPane.showInputDialog("Insira a data de nascimento:");
            System.out.println("teste: " + data);
            DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
            dtf.setLenient(false);
            Date dt = null;
            try {
                dt = dtf.parse(data);
                dataV = true;
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Insira uma data válida.");
            } catch (NullPointerException e) {
                cancelar();
                Thread.currentThread().stop();
            }

        }
        paciente.setDataNasc(data);
        String end = JOptionPane.showInputDialog("Insira o Endereço:");
        if (end == null || end.isEmpty()) {
            cancelar();
            Thread.currentThread().stop();
        }
        paciente.setEndereco(end);
        String fone = null;
        Boolean foneV = false;
        while (foneV == false) {
            fone = JOptionPane.showInputDialog("Insira o Telefone:");
            if (fone == null || fone.isEmpty()) {
                cancelar();
                Thread.currentThread().stop();
            }
            for (int i = 0; i < fone.length(); i++) {
                if (Character.isLetter(fone.charAt(i))) {
                    JOptionPane.showMessageDialog(null, "Digite um telefone válido.");
                } else if (i == fone.length() - 1) {
                    foneV = true;
                }
            }
        }
        paciente.setFone(fone);
        pacienteRepositorio.inserir(paciente);
        TabelaPaciente();
    }//GEN-LAST:event_btnInsPacienteMouseClicked

    private void btnExcUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExcUsuarioMouseClicked
        // TODO add your handling code here:
        if (btnAltUsuario.isSelected() == false) {
            if (btnExcUsuario.isSelected() == true) {
                JOptionPane.showMessageDialog(null, "Clique no partido que deseja excluir.");
                btnExcUsuario.setText("Cancelar Exclusão");
                excluirUsuario = true;
            } else {
                btnExcUsuario.setText("Excluir");
                excluirUsuario = false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Primeiramente desative as alterações para habilitar exclusões.");
            btnExcUsuario.setSelected(false);
        }
    }//GEN-LAST:event_btnExcUsuarioMouseClicked

    private void btnAltUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAltUsuarioMouseClicked
        // TODO add your handling code here:
        if (btnExcUsuario.isSelected() == false) {
            if (btnAltUsuario.isSelected() == true) {
                JOptionPane.showMessageDialog(null, "Clique no campo que deseja alterar.");
                btnAltUsuario.setText("Desabilitar Alterações");
                alterarUsuario = true;
            } else {
                btnAltUsuario.setText("Habilitar Alterações");
                alterarUsuario = false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Primeiramente cancele a exclusão para habilitar alterações.");
            btnAltUsuario.setSelected(false);
        }
    }//GEN-LAST:event_btnAltUsuarioMouseClicked

    private void txtCpfUsuarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpfUsuarioKeyReleased
        // TODO add your handling code here:
        Integer rows = tbUsuarios.getRowCount();
        for (int i = 0; i < rows; i++) {
            if (tbUsuarios.getValueAt(i, 4).equals(txtCpfUsuario.getText())) {
                tbUsuarios.setRowSelectionInterval(i, i);
                tbUsuarios.scrollRectToVisible(new Rectangle(tbUsuarios.getCellRect(i, 0, true)));
                lblCpfUsuario.setText("Usuário encontrado.");
                Thread.currentThread().stop();
            } else {
                lblCpfUsuario.setText("Nenhum Usuário com este CPF foi encontrado.");
            }
            if (txtCpfUsuario.getText().equals("")) {
                lblCpfUsuario.setText(null);
            }
        }
    }//GEN-LAST:event_txtCpfUsuarioKeyReleased

    private void tbUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbUsuariosMouseClicked
        // TODO add your handling code here:
        if (alterarUsuario == true) {
            AlterarUsuario();
        } else if (excluirUsuario == true) {
            ExcluirUsuario();
        }
    }//GEN-LAST:event_tbUsuariosMouseClicked

    private void btnInsUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsUsuarioMouseClicked
        // TODO add your handling code here:
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();
        Usuario usuario = new Usuario();
        String nome = null;
        Boolean nomeV = false;
        while (nomeV == false) {
            nome = JOptionPane.showInputDialog("Insira o Nome:");
            if (nome == null || nome.isEmpty()) {
                cancelar();
                Thread.currentThread().stop();
            }
            if (!Character.isLetter(nome.charAt(0))) {
                JOptionPane.showMessageDialog(null, "O nome deve ser iniciado com uma letra.");
            } else {
                nomeV = true;
            }
        }
        usuario.setNome(nome);
        String usuarioUser = null;
        Boolean userV = false;
        while (userV == false) {
            usuarioUser = JOptionPane.showInputDialog("Insira o Usuário:");
            if (usuarioUser == null || usuarioUser.isEmpty()) {
                cancelar();
                Thread.currentThread().stop();
            }
            if (!Character.isLetter(usuarioUser.charAt(0))) {
                JOptionPane.showMessageDialog(null, "O usuario deve ser iniciado com uma letra.");
            } else {
                userV = true;
            }
        }
        usuario.setUsuario(usuarioUser);
        String senha = JOptionPane.showInputDialog("Insira a Senha:");
        if (senha == null || senha.isEmpty()) {
            cancelar();
            Thread.currentThread().stop();
        }
        usuario.setSenha(senha);
        String np = JOptionPane.showInputDialog("Insira o Nível de Privilégio: (1) Médico, (2) Oficial, (3) Administrador.");
        if (np == null || np.isEmpty()) {
            cancelar();
            Thread.currentThread().stop();
        }
        while ("1" != np.intern() && "2" != np.intern() && "3" != np.intern()) {
            np = JOptionPane.showInputDialog("Opção Inválida. Digite uma das opções: (1) Médico, (2) Oficial, (3) Administrador.");
            if (np == null) {
                cancelar();
                Thread.currentThread().stop();
            }
        }
        usuario.setNP(Integer.parseInt(np));
        String cpf = null;
        Boolean cpfV = false;
        while (cpfV == false) {
            cpf = JOptionPane.showInputDialog("Insira o CPF:");
            if (cpf == null || cpf.isEmpty()) {
                cancelar();
                Thread.currentThread().stop();
            } else if (AdminTela.isValidCPF(cpf) == false) {
                JOptionPane.showMessageDialog(null, "Digite um CPF válido.");
            } else {
                cpfV = true;
            }
        }
        usuario.setCPF(cpf);
        if (usuario.getNP() == 1) {
            String esp = JOptionPane.showInputDialog("Insira a Especilidade:");
            if (esp == null || esp.isEmpty()) {
                cancelar();
                Thread.currentThread().stop();
            }
            usuario.setEspecialidade(esp);
        }
        usuarioRepositorio.inserir(usuario);
        TabelaUsuario();
        ListaMedico();
        ListaEspecialidade();
    }//GEN-LAST:event_btnInsUsuarioMouseClicked

    private void jltPDFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltPDFMouseClicked
        // TODO add your handling code here:
        if (Desktop.isDesktopSupported()) {
            try {
                File myFile = new File(System.getProperty("user.dir") + "\\" + jltPDF.getSelectedValue());
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Não foi possível abrir o relatório.");
                }
            }
    }//GEN-LAST:event_jltPDFMouseClicked

    private void calendarAcessoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarAcessoPropertyChange
        // TODO add your handling code here:
        if (calendarAcesso.getSelectedDate() == null) {
            calendarAcesso.setSelectedDate(LocalDate.now());
        }
    }//GEN-LAST:event_calendarAcessoPropertyChange

    private void btnReportAcessosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReportAcessosMouseClicked
        // TODO add your handling code here:
        if (calendarAcesso.getSelectedDate() == null) {
            JOptionPane.showMessageDialog(null, "Primeiramente selecione uma data.");
            Thread.currentThread().stop();
        }
        try {
            if (createDataSourceAcessos() == null) {
                JOptionPane.showMessageDialog(null, "Nenhum acesso foi realizado nesta data.");
                Thread.currentThread().stop();
            }
        } catch (ParseException ex) {
            Logger.getLogger(SecretarioTela.class.getName()).log(Level.SEVERE, null, ex);
        }
        StyleBuilder boldStyle = stl.style().bold();
        StyleBuilder boldCenteredStyle = stl.style(boldStyle).setHorizontalTextAlignment(HorizontalTextAlignment.CENTER);
        StyleBuilder columnTitleStyle = stl.style(boldCenteredStyle)
        .setBorder(stl.pen1Point())
        .setBackgroundColor(Color.LIGHT_GRAY);
        try {
            try {
                report()//create new report design
                .setColumnTitleStyle(columnTitleStyle)
                .highlightDetailEvenRows()
                .columns(//add columns
                    //            title,     field name     data type
                    col.column("Usuário", "usuario", type.stringType()),
                    col.column("Nome", "nome", type.stringType()),
                    col.column("Horário", "horario", type.stringType()))
                .title(cmp.text("Relatório de Acessos de "
                    + calendarAcesso.getSelectedDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))).setStyle(boldCenteredStyle))//shows report title
            .pageFooter(cmp.pageXofY().setStyle(boldCenteredStyle))//shows number of page at page footer
            .setDataSource(createDataSourceAcessos())//set datasource
            .show(false)
            .toPdf(Exporters.pdfExporter("Acessos-" + Timestamp.from(Instant.now()).toString().split("\\.")[0].replace(":", "-").replace(" ", "_") + ".pdf"));
        } catch (ParseException ex) {
            Logger.getLogger(SecretarioTela.class.getName()).log(Level.SEVERE, null, ex);
        }
        } catch (DRException e) {
            e.printStackTrace();
        }
        ListaPDF();
    }//GEN-LAST:event_btnReportAcessosMouseClicked

    private void calendarDiarioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarDiarioPropertyChange
        // TODO add your handling code here:
        if (calendarDiario.getSelectedDate() == null) {
            calendarDiario.setSelectedDate(LocalDate.now());
        }
    }//GEN-LAST:event_calendarDiarioPropertyChange

    private void btnReportDiarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReportDiarioMouseClicked
        // TODO add your handling code here:
        if (calendarDiario.getSelectedDate() == null) {
            JOptionPane.showMessageDialog(null, "Primeiramente selecione uma data.");
            Thread.currentThread().stop();
        }
        if (createDataSourceDiario() == null) {
            JOptionPane.showMessageDialog(null, "Nenhum atendimento foi realizado nesta data.");
            Thread.currentThread().stop();
        }
        StyleBuilder boldStyle = stl.style().bold();
        StyleBuilder boldCenteredStyle = stl.style(boldStyle).setHorizontalTextAlignment(HorizontalTextAlignment.CENTER);
        StyleBuilder columnTitleStyle = stl.style(boldCenteredStyle)
        .setBorder(stl.pen1Point())
        .setBackgroundColor(Color.LIGHT_GRAY);
        try {
            report()//create new report design
            .setColumnTitleStyle(columnTitleStyle)
            .highlightDetailEvenRows()
            .columns(//add columns
                //            title,     field name     data type
                col.column("Horário", "horario", type.stringType()),
                col.column("Médico", "medico", type.stringType()),
                col.column("Paciente", "paciente", type.stringType()),
                col.column("CPF do Paciente", "cpf", type.stringType()))
            .title(cmp.text("Relatório de Atendimentos Diários de "
                + calendarDiario.getSelectedDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))).setStyle(boldCenteredStyle))//shows report title
        .pageFooter(cmp.pageXofY().setStyle(boldCenteredStyle))//shows number of page at page footer
        .setDataSource(createDataSourceDiario())//set datasource
        .show(false)
        .toPdf(Exporters.pdfExporter("Diario-" + Timestamp.from(Instant.now()).toString().split("\\.")[0].replace(":", "-").replace(" ", "_") + ".pdf"));

        } catch (DRException e) {
            e.printStackTrace();
        }
        ListaPDF();
    }//GEN-LAST:event_btnReportDiarioMouseClicked

    private void calendarEspecialidadePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarEspecialidadePropertyChange
        // TODO add your handling code here:
        if (calendarEspecialidade.getSelectedDate() == null) {
            calendarEspecialidade.setSelectedDate(LocalDate.now());
        }
    }//GEN-LAST:event_calendarEspecialidadePropertyChange

    private void btnReportEspecMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReportEspecMouseClicked
        // TODO add your handling code here:
        if (calendarEspecialidade.getSelectedDate() == null) {
            JOptionPane.showMessageDialog(null, "Primeiramente selecione uma data.");
            Thread.currentThread().stop();
        }

        if (jbAnual.isSelected()) {
            ReportAnual();
        } else if (jbMensal.isSelected()) {
            ReportMensal();
        } else if (jbDiario.isSelected()) {
            ReportDiario();
        }
    }//GEN-LAST:event_btnReportEspecMouseClicked

    public void ReportAnual() {
        StyleBuilder boldStyle = stl.style().bold();
        StyleBuilder boldCenteredStyle = stl.style(boldStyle).setHorizontalTextAlignment(HorizontalTextAlignment.CENTER);
        StyleBuilder columnTitleStyle = stl.style(boldCenteredStyle)
                .setBorder(stl.pen1Point())
                .setBackgroundColor(Color.LIGHT_GRAY);
        try {
            report()//create new report design
                    .setColumnTitleStyle(columnTitleStyle)
                    .highlightDetailEvenRows()
                    .columns(//add columns
                            //            title,     field name     data type
                            col.column("Especialidade", "espec", type.stringType()),
                            col.column("Total de Atendimentos", "total", type.stringType()))
                    .title(cmp.text("Relatório Anual de Atendimentos por Especialidade: ").setStyle(boldCenteredStyle))//shows report title
                    .pageFooter(cmp.pageXofY().setStyle(boldCenteredStyle))//shows number of page at page footer
                    .setDataSource(createDataSourceEspAnual())//set datasource
                    .show(false)
                    .toPdf(Exporters.pdfExporter("EspecAnual-" + Timestamp.from(Instant.now()).toString().split("\\.")[0].replace(":", "-").replace(" ", "_") + ".pdf"));
        } catch (DRException e) {
            e.printStackTrace();
        }
        ListaPDF();
    }

    public void ReportMensal() {
        StyleBuilder boldStyle = stl.style().bold();
        StyleBuilder boldCenteredStyle = stl.style(boldStyle).setHorizontalTextAlignment(HorizontalTextAlignment.CENTER);
        StyleBuilder columnTitleStyle = stl.style(boldCenteredStyle)
                .setBorder(stl.pen1Point())
                .setBackgroundColor(Color.LIGHT_GRAY);
        try {
            report()//create new report design
                    .setColumnTitleStyle(columnTitleStyle)
                    .highlightDetailEvenRows()
                    .columns(//add columns
                            //            title,     field name     data type
                            col.column("Especialidade", "espec", type.stringType()),
                            col.column("Total de Atendimentos", "total", type.stringType()))
                    .title(cmp.text("Relatório Mensal de Atendimentos por Especialidade: ").setStyle(boldCenteredStyle))//shows report title
                    .pageFooter(cmp.pageXofY().setStyle(boldCenteredStyle))//shows number of page at page footer
                    .setDataSource(createDataSourceEspMensal())//set datasource
                    .show(false)
                    .toPdf(Exporters.pdfExporter("EspecMensal-" + Timestamp.from(Instant.now()).toString().split("\\.")[0].replace(":", "-").replace(" ", "_") + ".pdf"));
        } catch (DRException e) {
            e.printStackTrace();
        }
        ListaPDF();
    }

    public void ReportDiario() {
        int n = 0;
        StyleBuilder boldStyle = stl.style().bold();
        StyleBuilder boldCenteredStyle = stl.style(boldStyle).setHorizontalTextAlignment(HorizontalTextAlignment.CENTER);
        StyleBuilder columnTitleStyle = stl.style(boldCenteredStyle)
                .setBorder(stl.pen1Point())
                .setBackgroundColor(Color.LIGHT_GRAY);
        try {
            report()//create new report design
                    .setColumnTitleStyle(columnTitleStyle)
                    .highlightDetailEvenRows()
                    .columns(//add columns
                            //            title,     field name     data type
                            col.column("Especialidade", "espec", type.stringType()),
                            col.column("Total de Atendimentos", "total", type.stringType()))
                    .title(cmp.text("Relatório Diario de Atendimentos por Especialidade: ").setStyle(boldCenteredStyle))//shows report title
                    .pageFooter(cmp.pageXofY().setStyle(boldCenteredStyle))//shows number of page at page footer
                    .setDataSource(createDataSourceEspDiario())//set datasource
                    .show(false)
                    .toPdf(Exporters.pdfExporter("EspecDiario-" + Timestamp.from(Instant.now()).toString().split("\\.")[0].replace(":", "-").replace(" ", "_") + ".pdf"));
        } catch (DRException e) {
            e.printStackTrace();
        }
        ListaPDF();
    }

    private JRDataSource createDataSourceAcessos() throws ParseException {
        AcessosRepositorio acessosRepositorio = new AcessosRepositorio();
        LocalDate selDate = calendarAcesso.getSelectedDate();
        String formatted = selDate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        List<Acessos> acessos = acessosRepositorio.buscarPorData(formatted);
        DRDataSource dataSource = new DRDataSource("usuario", "nome", "horario");
        if (acessos == null){
          return null;  
        }
        if (!acessos.isEmpty() || acessos != null) {
            for (Acessos acesso : acessos) {
                String min = Integer.toString(acesso.getData().getMinutes());
                if (min.length() < 2) {
                    min = "0" + min;
                }
                String hour = Integer.toString(acesso.getData().getHours());
                if (hour.length() < 2) {
                    hour = "0" + hour;
                }
                dataSource.add(acesso.getUsuario(), acesso.getNome(), hour + ":" + min);
            }
        } else {
            return null;
        }
        return dataSource;
    }

    private JRDataSource createDataSourceDiario() {
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        LocalDate selDate = calendarDiario.getSelectedDate();
        String formatted = selDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        List<Atendimento> atendimentos = atendimentoRepositorio.buscarPorData(formatted);
        DRDataSource dataSource = new DRDataSource("horario", "medico", "paciente", "cpf");
        if (atendimentos == null){
          return null;  
        }
        if (!atendimentos.isEmpty() || atendimentos != null) {
            for (Atendimento atendimento : atendimentos) {
                AtendimentoPK atendimentoPK = atendimento.getId();
                dataSource.add(atendimentoPK.getHora(), atendimentoPK.getMedico(), atendimento.getPaciente().getNome(), atendimento.getPaciente().getCPF());
            }
        }
        return dataSource;
    }

    private JRDataSource createDataSourceEspAnual() {
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        LocalDate selDate = calendarEspecialidade.getSelectedDate();
        String formatted = selDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        List<Atendimento> atendimentos = atendimentoRepositorio.buscarTudoEspec();
        System.out.println(atendimentos);
        DRDataSource dataSource = new DRDataSource("espec", "total");
        if (!atendimentos.isEmpty() || atendimentos != null) {
            for (Atendimento atendimento : atendimentos) {
                AtendimentoPK atendimentoPK = atendimento.getId();
                String dataBanco = atendimentoPK.getData();
                Integer qtdEspec = 0;
                for (int x = 0; x < spec.size(); x++) {
                    if (atendimento.getEspecialidade().equals(spec.get(x))) {
                        Boolean diaV = true;
                        for (int i = 0; i < 4; i++) {
                            if (formatted.charAt(i) != dataBanco.charAt(i)) {
                                diaV = false;
                            } else if (diaV = true && i == 3) {
                                Integer qtd = Integer.parseInt(spec.get(x + 1));
                                qtd++;
                                spec.set(x + 1, qtd.toString());
                            }
                        }
                    }
                }
            }
            for (int x = 0; x < spec.size(); x++) {
                dataSource.add(spec.get(x), spec.get(x + 1));
                x++;
            }
        }
        ListaEspecialidade();
        return dataSource;
    }

    private JRDataSource createDataSourceEspMensal() {
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        LocalDate selDate = calendarEspecialidade.getSelectedDate();
        String formatted = selDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        List<Atendimento> atendimentos = atendimentoRepositorio.buscarTudoEspec();
        System.out.println(atendimentos);
        DRDataSource dataSource = new DRDataSource("espec", "total");
        if (!atendimentos.isEmpty() || atendimentos != null) {
            for (Atendimento atendimento : atendimentos) {
                AtendimentoPK atendimentoPK = atendimento.getId();
                String dataBanco = atendimentoPK.getData();
                Integer qtdEspec = 0;
                for (int x = 0; x < spec.size(); x++) {
                    if (atendimento.getEspecialidade().equals(spec.get(x))) {
                        Boolean diaV = true;
                        for (int i = 0; i < 7; i++) {
                            if (formatted.charAt(i) != dataBanco.charAt(i)) {
                                diaV = false;
                            } else if (diaV = true && i == 6) {
                                Integer qtd = Integer.parseInt(spec.get(x + 1));
                                qtd++;
                                spec.set(x + 1, qtd.toString());
                            }
                        }
                    }
                }
            }
            for (int x = 0; x < spec.size(); x++) {
                dataSource.add(spec.get(x), spec.get(x + 1));
                x++;
            }
        }
        ListaEspecialidade();
        return dataSource;
    }

    private JRDataSource createDataSourceEspDiario() {
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        LocalDate selDate = calendarEspecialidade.getSelectedDate();
        String formatted = selDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        List<Atendimento> atendimentos = atendimentoRepositorio.buscarTudoEspec();
        System.out.println(atendimentos);
        DRDataSource dataSource = new DRDataSource("espec", "total");
        if (!atendimentos.isEmpty() || atendimentos != null) {
            for (Atendimento atendimento : atendimentos) {
                AtendimentoPK atendimentoPK = atendimento.getId();
                String dataBanco = atendimentoPK.getData();
                Integer qtdEspec = 0;
                for (int x = 0; x < spec.size(); x++) {
                    if (atendimento.getEspecialidade().equals(spec.get(x))) {
                        Boolean diaV = true;
                        for (int i = 0; i < 10; i++) {
                            if (formatted.charAt(i) != dataBanco.charAt(i)) {
                                diaV = false;
                            } else if (diaV = true && i == 9) {
                                Integer qtd = Integer.parseInt(spec.get(x + 1));
                                qtd++;
                                spec.set(x + 1, qtd.toString());
                            }
                        }
                    }
                }
            }
            for (int x = 0; x < spec.size(); x++) {
                dataSource.add(spec.get(x), spec.get(x + 1));
                x++;
            }
        }
        ListaEspecialidade();
        return dataSource;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new com.sun.java.swing.plaf.windows.WindowsLookAndFeel());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminTela(user).setVisible(true);
            }
        });
    }

    public void cancelar() {
        JOptionPane.showMessageDialog(null, "Operação cancelada!");
    }

    public void AlterarUsuario() {
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();
        Integer row = tbUsuarios.getSelectedRow();
        Integer col = tbUsuarios.getSelectedColumn();
        String title = (String) tbUsuarios.getColumnName(col);
        String name = (String) tbUsuarios.getValueAt(row, 0);
        Usuario usuario = usuarioRepositorio.buscarPorNome(name);
        switch (title) {
            case "Nome":
                String nome = null;
                Boolean nomeV = false;
                while (nomeV == false) {
                    nome = JOptionPane.showInputDialog("Insira o Nome:");
                    if (nome == null || nome.isEmpty()) {
                        cancelar();
                        Thread.currentThread().stop();
                    }
                    if (!Character.isLetter(nome.charAt(0))) {
                        JOptionPane.showMessageDialog(null, "O nome deve ser iniciado com uma letra.");
                    } else {
                        nomeV = true;
                    }
                }
                usuario.setNome(nome);
                break;
            case "Usuario":
                String usuarioUser = null;
                Boolean userV = false;
                while (userV == false) {
                    usuarioUser = JOptionPane.showInputDialog("Insira o Usuário:");
                    if (usuarioUser == null || usuarioUser.isEmpty()) {
                        cancelar();
                        Thread.currentThread().stop();
                    }
                    if (!Character.isLetter(usuarioUser.charAt(0))) {
                        JOptionPane.showMessageDialog(null, "O usuario deve ser iniciado com uma letra.");
                    } else {
                        userV = true;
                    }
                }
                usuario.setUsuario(usuarioUser);
                break;
            case "Senha":
                String senha = JOptionPane.showInputDialog("Insira a Senha:");
                if (senha == null || senha.isEmpty()) {
                    cancelar();
                    Thread.currentThread().stop();
                }
                usuario.setSenha(senha);
                break;
            case "NP":
                String np = JOptionPane.showInputDialog("Insira o Nível de Privilégio: (1) Médico, (2) Oficial, (3) Administrador.");
                if (np == null || np.isEmpty()) {
                    cancelar();
                    Thread.currentThread().stop();
                }
                while ("1" != np.intern() && "2" != np.intern() && "3" != np.intern()) {
                    np = JOptionPane.showInputDialog("Opção Inválida. Digite uma das opções: (1) Médico, (2) Oficial, (3) Administrador.");
                    if (np == null) {
                        cancelar();
                        Thread.currentThread().stop();
                    }
                }
                usuario.setNP(Integer.parseInt(np));
                break;
            case "CPF":
                String cpf = null;
                Boolean cpfV = false;
                while (cpfV == false) {
                    cpf = JOptionPane.showInputDialog("Insira o CPF:");
                    if (cpf == null || cpf.isEmpty()) {
                        cancelar();
                        Thread.currentThread().stop();
                    } else if (AdminTela.isValidCPF(cpf) == false) {
                        JOptionPane.showMessageDialog(null, "Digite um CPF válido.");
                    } else {
                        cpfV = true;
                    }
                }
                usuario.setCPF(cpf);
                break;
            case "Especilidade":
                String esp = JOptionPane.showInputDialog("Insira a Especialidade:");
                if (esp == null || esp.isEmpty()) {
                    cancelar();
                    Thread.currentThread().stop();
                }
                usuario.setEspecialidade(esp);
                break;
        }
        usuarioRepositorio.editar(usuario);
        TabelaUsuario();
        ListaMedico();
    }

    public void ExcluirUsuario() {
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();
        Integer row = tbUsuarios.getSelectedRow();
        String nome = (String) tbUsuarios.getValueAt(row, 0);
        Usuario usuario = usuarioRepositorio.buscarPorNome(nome);
        usuarioRepositorio.excluir(usuario);
        TabelaUsuario();
        ListaMedico();
        JOptionPane.showMessageDialog(null, "Excluido Com Sucesso.");
        btnExcUsuario.setText("Excluir");
        excluirUsuario = false;
        btnExcUsuario.setSelected(false);
    }

    public void TabelaUsuario() {
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();
        List<Usuario> usuarios = usuarioRepositorio.buscarTudoOrdenado();
        String[] colunasTabela = new String[]{"Nome", "Usuario", "Senha", "NP", "CPF", "Especialidade"};
        DefaultTableModel modeloTabela = new DefaultTableModel(null, colunasTabela) {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        tbUsuarios.setModel(modeloTabela);
        for (Usuario usuario : usuarios) {
            String np = null;
            if (usuario.getNP() == 1) {
                np = "Médico";
            } else if (usuario.getNP() == 2) {
                np = "Secretário";
            } else if (usuario.getNP() == 3) {
                np = "Administrador";
            }
            modeloTabela.addRow(new Object[]{usuario.getNome(), usuario.getUsuario(), usuario.getSenha(),
                np, usuario.getCPF(), usuario.getEspecialidade()});
        }
    }

    public void AlterarPaciente() {
        PacienteRepositorio pacienteRepositorio = new PacienteRepositorio();
        Integer row = tbPacientes.getSelectedRow();
        Integer col = tbPacientes.getSelectedColumn();
        String title = (String) tbPacientes.getColumnName(col);
        String name = (String) tbPacientes.getValueAt(row, 0);
        Paciente paciente = pacienteRepositorio.buscarPorNome(name);
        switch (title) {
            case "Nome":
                String nome = null;
                Boolean nomeV = false;
                while (nomeV == false) {
                    nome = JOptionPane.showInputDialog("Insira o Nome:");
                    if (nome == null || nome.isEmpty()) {
                        cancelar();
                        Thread.currentThread().stop();
                    }
                    if (!Character.isLetter(nome.charAt(0))) {
                        JOptionPane.showMessageDialog(null, "O nome deve ser iniciado com uma letra.");
                    } else {
                        nomeV = true;
                    }
                }
                paciente.setNome(nome);
                break;
            case "CPF":
                String cpf = null;
                Boolean cpfV = false;
                while (cpfV == false) {
                    cpf = JOptionPane.showInputDialog("Insira o CPF:");
                    if (cpf == null || cpf.isEmpty()) {
                        cancelar();
                        Thread.currentThread().stop();
                    } else if (AdminTela.isValidCPF(cpf) == false) {
                        JOptionPane.showMessageDialog(null, "Digite um CPF válido.");
                    } else {
                        cpfV = true;
                    }
                }
                paciente.setCPF(cpf);
                break;
            case "CNS":
                String sus = JOptionPane.showInputDialog("Insira o número do CNS:");
                if (sus == null || sus.isEmpty()) {
                    cancelar();
                    Thread.currentThread().stop();
                }
                paciente.setSUS(sus);
                break;
            case "Data Nasc.":
                Boolean dataV = false;
                String data = null;
                while (dataV == false) {

                    data = JOptionPane.showInputDialog("Insira a data de nascimento:");
                    System.out.println("teste: " + data);
                    DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
                    dtf.setLenient(false);
                    Date dt = null;
                    try {
                        dt = dtf.parse(data);
                        dataV = true;
                    } catch (ParseException ex) {
                        JOptionPane.showMessageDialog(null, "Insira uma data válida.");
                    } catch (NullPointerException e) {
                        cancelar();
                        Thread.currentThread().stop();
                    }

                }
                paciente.setDataNasc(data);
                break;
            case "Endereço":
                String end = JOptionPane.showInputDialog("Insira o Endereço:");
                if (end == null || end.isEmpty()) {
                    cancelar();
                    Thread.currentThread().stop();
                }
                paciente.setEndereco(end);
                break;
            case "Fone":
                String fone = null;
                Boolean foneV = false;
                while (foneV == false) {
                    fone = JOptionPane.showInputDialog("Insira o Telefone:");
                    if (fone == null || fone.isEmpty()) {
                        cancelar();
                        Thread.currentThread().stop();
                    }
                    for (int i = 0; i < fone.length(); i++) {
                        if (Character.isLetter(fone.charAt(i))) {
                            JOptionPane.showMessageDialog(null, "Digite um telefone válido.");
                        } else if (i == fone.length() - 1) {
                            foneV = true;
                        }
                    }
                }
                paciente.setFone(fone);
                break;
            default:
                break;
        }
        pacienteRepositorio.editar(paciente);
        TabelaPaciente();
    }

    public void TabelaPaciente() {
        PacienteRepositorio pacienteRepositorio = new PacienteRepositorio();
        List<Paciente> pacientes = pacienteRepositorio.buscarTudoOrdenado();
        String[] colunasTabela = new String[]{"Nome", "CPF", "CNS", "Data Nasc.", "Endereço", "Fone"};
        DefaultTableModel modeloTabela = new DefaultTableModel(null, colunasTabela) {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        tbPacientes.setModel(modeloTabela);
        for (Paciente paciente : pacientes) {
            modeloTabela.addRow(new Object[]{paciente.getNome(), paciente.getCPF(), paciente.getSUS(),
                paciente.getDataNasc(), paciente.getEndereco(), paciente.getFone()});

        }
    }

    public void ListaMedico() {
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();
        List<Usuario> usuarios = usuarioRepositorio.buscarPorNP(1);

        DefaultListModel model = new DefaultListModel();
        jltMedico.setModel(model);
        for (Usuario usuario : usuarios) {
            model.addElement(usuario.getNome());
        }
    }

    public void TabelaAtendimento(String medico) {
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        List<Atendimento> atendimentos = null;
        Date dt = null;
        if (!txtData.getText().isEmpty() && jbPaciente.isSelected()) {
            atendimentos = atendimentoRepositorio.buscarPorPacienteMedico(medico, txtData.getText());
            if (atendimentos == null || atendimentos.isEmpty()) {
                Thread.currentThread().stop();
            }
        } else if (!txtData.getText().isEmpty() && jbData.isSelected()) {
            try {
                dt = new SimpleDateFormat("dd/MM/yyyy").parse(txtData.getText());
            } catch (ParseException ex) {
                Logger.getLogger(AdminTela.class.getName()).log(Level.SEVERE, null, ex);
            }
            SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");
            String formatted = fm.format(dt);
            atendimentos = atendimentoRepositorio.buscarPorDataMedico(medico, formatted);
        } else {
            atendimentos = atendimentoRepositorio.buscarPorMedico(medico);
        }

        String[] colunasTabela = new String[]{"Data", "Hora", "Paciente"};
        DefaultTableModel modeloTabela = new DefaultTableModel(null, colunasTabela) {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        tbAtendimento.setModel(modeloTabela);
        if (atendimentos == null && txtData.getText().isEmpty()) {
            horarios();
            Thread.currentThread().stop();
        } else {

            for (Atendimento atendimento : atendimentos) {
                LocalDate local = LocalDate.parse(atendimento.getId().getData());
                String data = local.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                modeloTabela.addRow(new Object[]{data, atendimento.getId().getHora(),
                    atendimento.getPaciente().getNome()});
            }
        }
        horarios();
    }

    public void horarios() {
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        LocalDate selDate = calendarData.getSelectedDate();
        String formatted = selDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        String medico = jltMedico.getSelectedValue();
        List<Atendimento> atendimentos = atendimentoRepositorio.buscarPorDataMedico(medico, formatted);
        DefaultListModel hModel = new DefaultListModel();
        String[] list = new String[]{"08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30 ", "12:00",
            "12:30", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30"};
        int qtdHora = list.length;
        for (int i = 0; i < qtdHora; i++) {
            hModel.addElement(list[i]);
        }
        if (atendimentos == null) {
            jltHora.setModel(hModel);
            Thread.currentThread().stop();
        }
        for (Atendimento atendimento : atendimentos) {
            for (int i = 0; i < qtdHora; i++) {
                if (atendimento.getId().getHora().equals(hModel.getElementAt(i))) {
                    hModel.setElementAt("<html><p style='color:red'>" + hModel.getElementAt(i) + "</p></html>", i);

                }
            }
        }
        jltHora.setModel(hModel);
    }

    public void AlterarAtendimento() {
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        Integer row = tbAtendimento.getSelectedRow();
        Integer col = tbAtendimento.getSelectedColumn();
        String title = (String) tbAtendimento.getColumnName(col);
        String valor = (String) tbAtendimento.getValueAt(row, 0);
        Date dtBusca = null;
        try {
            dtBusca = new SimpleDateFormat("dd/MM/yyyy").parse(valor);
        } catch (ParseException ex) {
            Logger.getLogger(AdminTela.class.getName()).log(Level.SEVERE, null, ex);
        }
        SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");
        String formatted = fm.format(dtBusca);
        Atendimento atendimento = atendimentoRepositorio.buscarUnicaDataMedico(jltMedico.getSelectedValue(), formatted);
        switch (title) {
            case "Data":
                JOptionPane.showMessageDialog(null, "Não é possível alterar a data de um atendimento diretamente."
                        + "\nExclua o atendimento atual e agende novamente na data desejada.");
                break;
            case "Hora":
                JOptionPane.showMessageDialog(null, "Não é possível alterar o horário de um atendimento diretamente."
                        + "\nExclua o atendimento atual e agende novamente no horário desejado.");
                break;
            case "Paciente":
                Paciente paciente = null;
                String cpf = null;
                Boolean cpfV = false;
                while (cpfV == false) {
                    cpf = JOptionPane.showInputDialog("Insira o CPF do Paciente:");
                    if (cpf == null || cpf.isEmpty()) {
                        cancelar();
                        Thread.currentThread().stop();
                    } else {
                        PacienteRepositorio pacienteRepositorio = new PacienteRepositorio();
                        paciente = pacienteRepositorio.buscarPorCpf(cpf);
                        if (paciente == null) {
                            JOptionPane.showMessageDialog(null, "Nenhum Paciente com este CPF foi encontrado.");
                        } else {
                            cpfV = true;
                        }
                    }
                }
                atendimento.setPaciente(paciente);
                break;
            default:
                break;
        }
        atendimentoRepositorio.editar(atendimento);
        TabelaAtendimento(jltMedico.getSelectedValue());
    }

    public void ExcluirAtendimento() {
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        Integer row = tbAtendimento.getSelectedRow();
        Integer col = tbAtendimento.getSelectedColumn();
        String title = (String) tbAtendimento.getColumnName(col);
        String valor = (String) tbAtendimento.getValueAt(row, 0);
        Date dtBusca = null;
        try {
            dtBusca = new SimpleDateFormat("dd/MM/yyyy").parse(valor);
        } catch (ParseException ex) {
            Logger.getLogger(AdminTela.class.getName()).log(Level.SEVERE, null, ex);
        }
        SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");
        String formatted = fm.format(dtBusca);
        Atendimento atendimento = atendimentoRepositorio.buscarUnicaDataMedico(jltMedico.getSelectedValue(), formatted);
        atendimentoRepositorio.excluir(atendimento);
        JOptionPane.showMessageDialog(null, "Excluido Com Sucesso.");
        btnExcAtendimento.setText("Excluir");
        excluirAtendimento = false;
        btnExcAtendimento.setSelected(false);
        TabelaAtendimento(jltMedico.getSelectedValue());
    }

    String espec[] = new String[10];
    List<String> spec = new ArrayList<>();

    public void ListaEspecialidade() {
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();
        List<Usuario> usuarios = usuarioRepositorio.buscarTudoEspec();
        int i = 0;
        spec = new ArrayList<>();
        for (Usuario usuario : usuarios) {
            if (usuario.getEspecialidade() != null) {
                espec[i] = usuario.getEspecialidade();
                espec[i + 1] = "0";
                spec.add(i, usuario.getEspecialidade());
                spec.add(i + 1, "0");
                i = i + 2;
            }
        }
    }

    public void ListaPDF() {
        DefaultListModel listModel = new DefaultListModel();
        jltPDF.setModel(listModel);
        List<String> pdfs = textFiles(System.getProperty("user.dir"));
        if (pdfs.isEmpty()) {
            listModel.addElement("Nenhum Relatório Encontrado.");
        } else {
            for (String pdf : pdfs) {
                listModel.addElement(pdf);
            }
        }
    }

    List<String> textFiles(String directory) {
        List<String> textFiles = new ArrayList<String>();
        File dir = new File(directory);
        for (File file : dir.listFiles()) {
            if (file.getName().endsWith((".pdf"))) {
                textFiles.add(file.getName());
            }
        }
        return textFiles;
    }

    /*@Override
    public void dispose() {
    new Login().setVisible(true);
    super.dispose();
    }*/
    private static final int[] pesoCPF = {11, 10, 9, 8, 7, 6, 5, 4, 3, 2};

    private static int calcularDigito(String str, int[] peso) {
        int soma = 0;
        for (int indice = str.length() - 1, digito; indice >= 0; indice--) {
            digito = Integer.parseInt(str.substring(indice, indice + 1));
            soma += digito * peso[peso.length - str.length() + indice];
        }
        soma = 11 - soma % 11;
        return soma > 9 ? 0 : soma;
    }

    public static boolean isValidCPF(String cpf) {
        if ((cpf == null) || (cpf.length() != 11)) {
            return false;
        }

        Integer digito1 = calcularDigito(cpf.substring(0, 9), pesoCPF);
        Integer digito2 = calcularDigito(cpf.substring(0, 9) + digito1, pesoCPF);
        return cpf.equals(cpf.substring(0, 9) + digito1.toString() + digito2.toString());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgendar;
    private javax.swing.JToggleButton btnAltAgenda;
    private javax.swing.JToggleButton btnAltPaciente;
    private javax.swing.JToggleButton btnAltUsuario;
    private javax.swing.JToggleButton btnExcAtendimento;
    private javax.swing.JToggleButton btnExcUsuario;
    private javax.swing.JButton btnInsPaciente;
    private javax.swing.JButton btnInsUsuario;
    private javax.swing.JButton btnReportAcessos;
    private javax.swing.JButton btnReportDiario;
    private javax.swing.JButton btnReportEspec;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private com.github.lgooddatepicker.components.CalendarPanel calendarAcesso;
    private com.github.lgooddatepicker.components.CalendarPanel calendarData;
    private com.github.lgooddatepicker.components.CalendarPanel calendarDiario;
    private com.github.lgooddatepicker.components.CalendarPanel calendarEspecialidade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton jbAnual;
    private javax.swing.JRadioButton jbData;
    private javax.swing.JRadioButton jbDiario;
    private javax.swing.JRadioButton jbMensal;
    private javax.swing.JRadioButton jbPaciente;
    private javax.swing.JList<String> jltHora;
    private javax.swing.JList<String> jltMedico;
    private javax.swing.JList<String> jltPDF;
    private javax.swing.JPanel jpAgendamento;
    private javax.swing.JPanel jpPaciente;
    private javax.swing.JPanel jpRelatorio;
    private javax.swing.JPanel jpUsuario;
    private javax.swing.JLabel lblCpfPaciente;
    private javax.swing.JLabel lblCpfUsuario;
    private javax.swing.JTable tbAtendimento;
    private javax.swing.JTable tbPacientes;
    private javax.swing.JTable tbUsuarios;
    private javax.swing.JTextField txtCpfPaciente;
    private javax.swing.JTextField txtCpfUsuario;
    private javax.swing.JTextField txtData;
    // End of variables declaration//GEN-END:variables
}
