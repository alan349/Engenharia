/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import Entidades.Atendimento;
import Entidades.AtendimentoPK;
import Entidades.Paciente;
import Entidades.Usuario;
import Repositorios.AtendimentoRepositorio;
import Repositorios.PacienteRepositorio;
import Repositorios.UsuarioRepositorio;
import com.github.lgooddatepicker.components.CalendarPanel;
import java.awt.Rectangle;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alan
 */
public class AdminTela extends javax.swing.JFrame {
    public static String user ; 
    /**
     * Creates new form AdminTela
     */
    public AdminTela(String usuario) {
        user = usuario;
        initComponents();
        TabelaUsuario();
        TabelaPaciente();
        ListaMedico();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        btnInsUsuario = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbUsuarios = new javax.swing.JTable();
        txtCpfUsuario = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnAltUsuario = new javax.swing.JToggleButton();
        lblCpfUsuario = new javax.swing.JLabel();
        btnExcUsuario = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        btnInsPaciente = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbPacientes = new javax.swing.JTable();
        txtCpfPaciente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnAltPaciente = new javax.swing.JToggleButton();
        lblCpfPaciente = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jltMedico = new javax.swing.JList<>();
        calendarData = new com.github.lgooddatepicker.components.CalendarPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jltHora = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbAtendimento = new javax.swing.JTable();
        btnAgendar = new javax.swing.JButton();
        btnAltPaciente1 = new javax.swing.JToggleButton();
        txtData = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jbData = new javax.swing.JRadioButton();
        jbPaciente = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(640, 480));

        jPanel5.setPreferredSize(new java.awt.Dimension(640, 480));

        btnInsUsuario.setLabel("Inserir");
        btnInsUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInsUsuarioMouseClicked(evt);
            }
        });

        tbUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Usuario", "Senha", "N.P.", "CPF", "RG"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbUsuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbUsuarios);

        txtCpfUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCpfUsuarioKeyReleased(evt);
            }
        });

        jLabel1.setText("Digite o CPF do Usuário desejado:");

        btnAltUsuario.setText("Habilitar Alterações");
        btnAltUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAltUsuarioMouseClicked(evt);
            }
        });

        lblCpfUsuario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btnExcUsuario.setText("Excluir");
        btnExcUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExcUsuarioMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(lblCpfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtCpfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(btnInsUsuario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAltUsuario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExcUsuario)))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCpfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCpfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsUsuario)
                    .addComponent(btnAltUsuario)
                    .addComponent(btnExcUsuario))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Usuários", jPanel5);

        btnInsPaciente.setLabel("Inserir");
        btnInsPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInsPacienteMouseClicked(evt);
            }
        });

        tbPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "CPF", "SUS", "Data Nasc.", "Endereço", "Fone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPacientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbPacientes);

        txtCpfPaciente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCpfPacienteKeyReleased(evt);
            }
        });

        jLabel2.setText("Digite o CPF do Paciente desejado:");

        btnAltPaciente.setText("Habilitar Alterações");
        btnAltPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAltPacienteMouseClicked(evt);
            }
        });

        lblCpfPaciente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(lblCpfPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtCpfPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnInsPaciente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAltPaciente)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCpfPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCpfPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsPaciente)
                    .addComponent(btnAltPaciente))
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Pacientes", jPanel1);

        jltMedico.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jltMedico.setPreferredSize(new java.awt.Dimension(250, 0));
        jltMedico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltMedicoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jltMedico);

        calendarData.setSelectedDate(LocalDate.now());
        calendarData.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarDataPropertyChange(evt);
            }
        });

        jltHora.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jltHora.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jltHora.setSelectedIndex(0);
        jScrollPane4.setViewportView(jltHora);

        tbAtendimento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Hora", "Paciente"
            }
        ));
        jScrollPane5.setViewportView(tbAtendimento);

        btnAgendar.setText("Agendar");
        btnAgendar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgendarMouseClicked(evt);
            }
        });

        btnAltPaciente1.setText("Habilitar Alterações");
        btnAltPaciente1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAltPaciente1MouseClicked(evt);
            }
        });

        txtData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataActionPerformed(evt);
            }
        });
        txtData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDataKeyReleased(evt);
            }
        });

        jLabel3.setText("Buscar por:");

        jLabel4.setText("Médicos:");

        buttonGroup1.add(jbData);
        jbData.setSelected(true);
        jbData.setText("Data");

        buttonGroup1.add(jbPaciente);
        jbPaciente.setText("Paciente");

        jLabel5.setText("Digite o dado desejado:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(calendarData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAgendar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbPaciente)
                            .addComponent(jbData))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAltPaciente1)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgendar))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(calendarData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAltPaciente1)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addGap(25, 25, 25))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbPaciente)
                        .addContainerGap(9, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Agendamentos", jPanel2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 635, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 452, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Relatórios", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private static boolean alterarUsuario = false, alterarPaciente = false;
    private static boolean excluirUsuario = false;
    private void btnAltUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAltUsuarioMouseClicked
        // TODO add your handling code here:
        if(btnAltUsuario.isSelected() == true){
            JOptionPane.showMessageDialog(null, "Clique no campo que deseja alterar.");
            btnAltUsuario.setText("Desabilitar Alterações");
            alterarUsuario = true;
        }else{
            btnAltUsuario.setText("Habilitar Alterações");
            alterarUsuario = false;
        }
    }//GEN-LAST:event_btnAltUsuarioMouseClicked

    private void tbUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbUsuariosMouseClicked
        // TODO add your handling code here:
        if(alterarUsuario == true){
            AlterarUsuario();
        }else if(excluirUsuario ==true){
            ExcluirUsuario();
        }
    }//GEN-LAST:event_tbUsuariosMouseClicked

    private void btnInsUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsUsuarioMouseClicked
        // TODO add your handling code here:
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();
        Usuario usuario = new Usuario();
        String nome = JOptionPane.showInputDialog("Insira o Nome:");
        if(nome == null){
            cancelar();
            Thread.currentThread().stop();
        }
        usuario.setNome(nome);
        String usuarioUser = JOptionPane.showInputDialog("Insira o Usuário:");
        if(usuarioUser == null){
            cancelar();
            Thread.currentThread().stop();
        }
        usuario.setUsuario(usuarioUser);
        String senha = JOptionPane.showInputDialog("Insira a Senha:");
        if(senha == null){
            cancelar();
            Thread.currentThread().stop();
        }
        usuario.setSenha(senha);
        String np = JOptionPane.showInputDialog("Insira o Nível de Privilégio: (1) Médico, (2) Oficial, (3) Administrador.");
        if(np == null){
            cancelar();
            Thread.currentThread().stop();
        }
        while ("1" != np.intern() && "2" != np.intern() && "3" != np.intern() ){
            np = JOptionPane.showInputDialog("Opção Inválida. Digite uma das opções: (1) Médico, (2) Oficial, (3) Administrador.");
            if(np == null){
                cancelar();
                Thread.currentThread().stop();
            }
        }
        usuario.setNP(Integer.parseInt(np));
        String cpf = JOptionPane.showInputDialog("Insira o CPF:");
        if(cpf == null){
            cancelar();
            Thread.currentThread().stop();
        }
        usuario.setCPF(cpf);
        String rg = JOptionPane.showInputDialog("Insira o RG:");
        if(rg == null){
            cancelar();
            Thread.currentThread().stop();
        }
        usuario.setRG(rg);
        usuarioRepositorio.inserir(usuario);
        TabelaUsuario();
        ListaMedico();
    }//GEN-LAST:event_btnInsUsuarioMouseClicked

    private void txtCpfUsuarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpfUsuarioKeyReleased
        // TODO add your handling code here:
        Integer rows = tbUsuarios.getRowCount();
        for(int i = 0; i<rows; i++){
            if(tbUsuarios.getValueAt(i, 4).equals(txtCpfUsuario.getText())){
                tbUsuarios.setRowSelectionInterval(i, i);
                tbUsuarios.scrollRectToVisible(new Rectangle(tbUsuarios.getCellRect(i, 0, true)));
                lblCpfUsuario.setText("Usuário encontrado.");
                Thread.currentThread().stop();
            }else{
                lblCpfUsuario.setText("Nenhum Usuário com este CPF foi encontrado.");
            }
            if(txtCpfUsuario.getText().equals("")){
                lblCpfUsuario.setText(null);
            }
        }        
    }//GEN-LAST:event_txtCpfUsuarioKeyReleased

    private void btnExcUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExcUsuarioMouseClicked
        // TODO add your handling code here:
        if(btnExcUsuario.isSelected() == true){
            JOptionPane.showMessageDialog(null, "Clique no partido que deseja excluir.");
            btnExcUsuario.setText("Cancelar Exclusão");
            excluirUsuario = true;
        }else{
            btnExcUsuario.setText("Excluir");
            excluirUsuario = false;
        }
    }//GEN-LAST:event_btnExcUsuarioMouseClicked

    private void btnInsPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsPacienteMouseClicked
        // TODO add your handling code here:
        PacienteRepositorio pacienteRepositorio = new PacienteRepositorio();
        Paciente paciente = new Paciente();
        String nome = JOptionPane.showInputDialog("Insira o Nome:");
        if(nome == null){
            cancelar();
            Thread.currentThread().stop();
        }
        paciente.setNome(nome);
        String cpf = JOptionPane.showInputDialog("Insira o CPF:");
        if(cpf == null){
            cancelar();
            Thread.currentThread().stop();
        }
        paciente.setCPF(cpf);
        String sus = JOptionPane.showInputDialog("Insira o código SUS:");
        if(sus == null){
            cancelar();
            Thread.currentThread().stop();
        }
        paciente.setSUS(sus);
        
        JFormattedTextField ftxt = new JFormattedTextField();
        try {
            ftxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        Object[] params = {"Insira a Data de Nascimento:", ftxt};
        JOptionPane.showMessageDialog(null, params);
        String data = ftxt.getText();
        String dataT = data.replace("/", "");
        dataT = dataT.replace(" ", "");

        if(dataT.equals("")){
            cancelar();
            Thread.currentThread().stop();
        }
        paciente.setDataNasc(data);
        String end = JOptionPane.showInputDialog("Insira o Endereço:");
        if(end == null){
            cancelar();
            Thread.currentThread().stop();
        }
        paciente.setEndereco(end);
        String fone = JOptionPane.showInputDialog("Insira o Telefone:");
        if(fone == null){
            cancelar();
            Thread.currentThread().stop();
        }
        paciente.setFone(fone);
        pacienteRepositorio.inserir(paciente);
        TabelaPaciente();
    }//GEN-LAST:event_btnInsPacienteMouseClicked

    private void tbPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPacientesMouseClicked
        // TODO add your handling code here:
        if(alterarPaciente == true){
            AlterarPaciente();
        }
    }//GEN-LAST:event_tbPacientesMouseClicked

    private void txtCpfPacienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpfPacienteKeyReleased
        // TODO add your handling code here:
        Integer rows = tbPacientes.getRowCount();
        for(int i = 0; i<rows; i++){
            if(tbPacientes.getValueAt(i, 1).equals(txtCpfPaciente.getText())){
                tbPacientes.setRowSelectionInterval(i, i);
                tbPacientes.scrollRectToVisible(new Rectangle(tbPacientes.getCellRect(i, 0, true)));
                lblCpfPaciente.setText("Paciente encontrado.");
                Thread.currentThread().stop();
            }else{
                lblCpfPaciente.setText("Nenhum Paciente com este CPF foi encontrado.");
            }
            if(txtCpfPaciente.getText().equals("")){
                lblCpfPaciente.setText(null);
            }
        }       
    }//GEN-LAST:event_txtCpfPacienteKeyReleased

    private void btnAltPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAltPacienteMouseClicked
        // TODO add your handling code here:
        if(btnAltPaciente.isSelected() == true){
            JOptionPane.showMessageDialog(null, "Clique no campo que deseja alterar.");
            btnAltPaciente.setText("Desabilitar Alterações");
            alterarPaciente = true;
        }else{
            btnAltPaciente.setText("Habilitar Alterações");
            alterarPaciente = false;
        }
    }//GEN-LAST:event_btnAltPacienteMouseClicked

    private void jltMedicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltMedicoMouseClicked
        // TODO add your handling code here:
        TabelaAtendimento(jltMedico.getSelectedValue());
    }//GEN-LAST:event_jltMedicoMouseClicked

    private void btnAgendarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgendarMouseClicked
        // TODO add your handling code here:
        Atendimento atendimento = new Atendimento();
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        AtendimentoPK atendimentoPK = new AtendimentoPK();
        PacienteRepositorio pacienteRepositorio = new PacienteRepositorio();
        
        LocalDate selDate = calendarData.getSelectedDate();        
        if (selDate.isBefore(LocalDate.now())){
            JOptionPane.showMessageDialog(null, "Selecione uma data superior ou igual a data atual.");
            cancelar();
            Thread.currentThread().stop();
        }
    
        String formatted = selDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        
        atendimentoPK.setData(formatted);
        String hora = jltHora.getSelectedValue();
        if(hora.charAt(0) == '<'){
            JOptionPane.showMessageDialog(null, "Já existe uma consulta agendada neste horário!");
            Thread.currentThread().stop();
        }
        atendimentoPK.setHora(hora);
        atendimentoPK.setMedico(jltMedico.getSelectedValue());
        atendimento.setId(atendimentoPK);
        String cpf = JOptionPane.showInputDialog(null, "Digite o CPF do Paciente desejado:");
        if (cpf == null){
            cancelar();
            Thread.currentThread().stop();
        }
        Paciente paciente = pacienteRepositorio.buscarPorCpf(cpf);
        atendimento.setPaciente(paciente);
        atendimentoRepositorio.inserir(atendimento);
        TabelaAtendimento(jltMedico.getSelectedValue());
    }//GEN-LAST:event_btnAgendarMouseClicked

    private void btnAltPaciente1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAltPaciente1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAltPaciente1MouseClicked

    private void calendarDataPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarDataPropertyChange
        // TODO add your handling code here:
        if(jPanel2.isShowing()){
         if(jltMedico.isSelectionEmpty()){
             JOptionPane.showMessageDialog(null, "Primeiramente selecione um médico.");
             Thread.currentThread().stop();
         }else{
             horarios();
         }
        }
    }//GEN-LAST:event_calendarDataPropertyChange

    private void txtDataKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataKeyReleased
        // TODO add your handling code here:
        String medico = jltMedico.getSelectedValue();
        if(jbData.isSelected()){
                if(txtData.getText().length() == 10){
                    TabelaAtendimento(medico);
                }
        }else if(jbPaciente.isSelected()){
                TabelaAtendimento(medico);
        }
        if(txtData.getText().isEmpty()){
                    TabelaAtendimento(medico);
        }
        
        Integer rows = tbAtendimento.getRowCount();
        Integer col = null;
        for(int i = 0; i<rows; i++){
            if(jbData.isSelected()){
                col = 0;
            }else if(jbPaciente.isSelected()){
                col = 2;
            }
            if(tbAtendimento.getValueAt(i, col).equals(txtData.getText())){
                tbAtendimento.setRowSelectionInterval(i, i);
                tbAtendimento.scrollRectToVisible(new Rectangle(tbAtendimento.getCellRect(i, 0, true)));
                Thread.currentThread().stop();
            }else{
            }

        }
    }//GEN-LAST:event_txtDataKeyReleased

    private void txtDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel"); 
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminTela(user).setVisible(true);
            }
        });
    }
    
    public void AlterarUsuario(){
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();
        Integer row = tbUsuarios.getSelectedRow();
        Integer col = tbUsuarios.getSelectedColumn();
        String title = (String) tbUsuarios.getColumnName(col);
        String nome = (String) tbUsuarios.getValueAt(row, 0);
        Usuario usuario = usuarioRepositorio.buscarPorNome(nome);
        switch (title) {
            case "Nome":
                String name = JOptionPane.showInputDialog("Insira o Nome:");
                if(nome == null){
                    cancelar();
                    Thread.currentThread().stop();
                }
                usuario.setNome(name);
                break;
            case "Usuario":
                String usuarioUser = JOptionPane.showInputDialog("Insira o Usuário:");
                if(usuarioUser == null){
                    cancelar();
                    Thread.currentThread().stop();
                }
                usuario.setUsuario(usuarioUser);
                break;
            case "Senha":
                String senha = JOptionPane.showInputDialog("Insira a Senha:");
                if(senha == null){
                    cancelar();
                    Thread.currentThread().stop();
                }
                usuario.setSenha(senha);
                break;
            case "NP":
                String np = JOptionPane.showInputDialog("Insira o Nível de Privilégio: (1) Médico, (2) Oficial, (3) Administrador.");
                if(np == null){
                    cancelar();
                    Thread.currentThread().stop();
                }
                while ("1" != np.intern() && "2" != np.intern() && "3" != np.intern() ){
                    np = JOptionPane.showInputDialog("Opção Inválida. Digite uma das opções: (1) Médico, (2) Oficial, (3) Administrador.");
                    if(np == null){
                        cancelar();
                        Thread.currentThread().stop();
                    }
                }
                usuario.setNP(Integer.parseInt(np));
                break;
            case "CPF":
                String cpf = JOptionPane.showInputDialog("Insira o CPF:");
                if(cpf == null){
                    cancelar();
                    Thread.currentThread().stop();
                }
                usuario.setCPF(cpf);
                break;
            case "RG":
                String rg = JOptionPane.showInputDialog("Insira o RG:");
                if(rg == null){
                    cancelar();
                    Thread.currentThread().stop();
                }
                usuario.setRG(rg);
                break;
        }
        usuarioRepositorio.editar(usuario);
        TabelaUsuario();
        ListaMedico();
    }
    
    public void ExcluirUsuario(){
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();
        Integer row = tbUsuarios.getSelectedRow();
        String nome = (String) tbUsuarios.getValueAt(row, 0);
        Usuario usuario = usuarioRepositorio.buscarPorNome(nome);
        usuarioRepositorio.excluir(usuario);
        TabelaUsuario();
        ListaMedico();
        JOptionPane.showMessageDialog(null, "Excluido Com Sucesso.");
        btnExcUsuario.setText("Excluir");
        excluirUsuario = false;
        btnExcUsuario.setSelected(false);
    }
    
    public void TabelaUsuario(){
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();
        List<Usuario> usuarios = usuarioRepositorio.buscarTudoOrdenado();
        String[] colunasTabela = new String []{"Nome", "Usuario", "Senha", "NP", "CPF", "RG"};
        DefaultTableModel modeloTabela = new DefaultTableModel(null, colunasTabela){
            @Override
            public boolean isCellEditable(int row, int column) {
               //all cells false
               return false;
            }
        };
        tbUsuarios.setModel(modeloTabela);
        for (Usuario usuario : usuarios) {
            modeloTabela.addRow(new Object[]{usuario.getNome(),usuario.getUsuario(),usuario.getSenha(),
            usuario.getNP(),usuario.getCPF(),usuario.getRG()});   
        }
    }
    
    public void cancelar(){
        JOptionPane.showMessageDialog(null, "Operação cancelada!");
    }
    
    public void AlterarPaciente(){
        PacienteRepositorio pacienteRepositorio = new PacienteRepositorio();
        Integer row = tbPacientes.getSelectedRow();
        Integer col = tbPacientes.getSelectedColumn();
        String title = (String) tbPacientes.getColumnName(col);
        String nome = (String) tbPacientes.getValueAt(row, 0);
        Paciente paciente = pacienteRepositorio.buscarPorNome(nome);
        switch (title) {
            case "Nome":
                String name = JOptionPane.showInputDialog("Insira o Nome:");
                if(nome == null){
                    cancelar();
                    Thread.currentThread().stop();
                }
                paciente.setNome(name);
                break;
            case "CPF":
                String cpf = JOptionPane.showInputDialog("Insira o CPF:");
                if(cpf == null){
                    cancelar();
                    Thread.currentThread().stop();
                }
                paciente.setCPF(cpf);
                break;
            case "SUS":
                String sus = JOptionPane.showInputDialog("Insira o código SUS:");
                if(sus == null){
                    cancelar();
                    Thread.currentThread().stop();
                }
                paciente.setSUS(sus);
                break;
            case "Data Nasc.":
                JFormattedTextField ftxt = new JFormattedTextField();
                try {
                    ftxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
                } catch (java.text.ParseException ex) {
                    ex.printStackTrace();
                }
                Object[] params = {"Insira a Data de Nascimento:", ftxt};
                JOptionPane.showMessageDialog(null, params);
                String data = ftxt.getText();
                String dataT = data.replace("/", "");
                dataT = dataT.replace(" ", "");

                if(dataT.equals("")){
                    cancelar();
                    Thread.currentThread().stop();
                }
                paciente.setDataNasc(data);
                break;
            case "Endereço":
                String end = JOptionPane.showInputDialog("Insira o Endereço:");
                if(end == null){
                    cancelar();
                    Thread.currentThread().stop();
                }
                paciente.setEndereco(end);
                break;
            case "RG":
                String fone = JOptionPane.showInputDialog("Insira o Telefone:");
                if(fone == null){
                    cancelar();
                    Thread.currentThread().stop();
                }
                paciente.setFone(fone);
                break;
            default:
                break;
        }
        pacienteRepositorio.editar(paciente);
        TabelaPaciente();
    }
    
    public void TabelaPaciente(){
        PacienteRepositorio pacienteRepositorio = new PacienteRepositorio();
        List<Paciente> pacientes = pacienteRepositorio.buscarTudoOrdenado();
        String[] colunasTabela = new String []{"Nome", "CPF", "SUS", "Data Nasc.", "Endereço", "Fone"};
        DefaultTableModel modeloTabela = new DefaultTableModel(null, colunasTabela){
            @Override
            public boolean isCellEditable(int row, int column) {
               //all cells false
               return false;
            }
        };
        tbPacientes.setModel(modeloTabela);
        for (Paciente paciente : pacientes) {
            modeloTabela.addRow(new Object[]{paciente.getNome(),paciente.getCPF(),paciente.getSUS(),
            paciente.getDataNasc(),paciente.getEndereco(),paciente.getFone()});   
            
        }
    }
    
    public void ListaMedico(){
        UsuarioRepositorio usuarioRepositorio = new UsuarioRepositorio();
        List<Usuario> usuarios = usuarioRepositorio.buscarPorNP(1);
        
        DefaultListModel model = new DefaultListModel();
        jltMedico.setModel(model);
        for (Usuario usuario : usuarios) {
            model.addElement(usuario.getNome());
        }
    }
    
    public void TabelaAtendimento(String medico){
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        List<Atendimento> atendimentos = null;
        Date dt = null;
        if(!txtData.getText().isEmpty() && jbPaciente.isSelected()){
            atendimentos = atendimentoRepositorio.buscarPorPacienteMedico(medico,txtData.getText());
        }else if(!txtData.getText().isEmpty() && jbData.isSelected()){
            try {
                dt = new SimpleDateFormat("dd/MM/yyyy").parse(txtData.getText());
            } catch (ParseException ex) {
                Logger.getLogger(AdminTela.class.getName()).log(Level.SEVERE, null, ex);
            }
            SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");
            String formatted = fm.format(dt);
            atendimentos = atendimentoRepositorio.buscarPorDataMedico(medico,formatted);
        }else {
            atendimentos = atendimentoRepositorio.buscarPorMedico(medico);
        }
        
        String[] colunasTabela = new String []{"Data", "Hora", "Paciente"};
        DefaultTableModel modeloTabela = new DefaultTableModel(null, colunasTabela){
            @Override
            public boolean isCellEditable(int row, int column) {
               //all cells false
               return false;
            }
        };
        tbAtendimento.setModel(modeloTabela);
        if(atendimentos == null && txtData.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Este médico ainda não tem atendimentos agendados.");
            Thread.currentThread().stop();
        }else{
            for (Atendimento atendimento : atendimentos) {
                LocalDate local = LocalDate.parse(atendimento.getId().getData());
                String data = local.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                modeloTabela.addRow(new Object[]{data,atendimento.getId().getHora(),
                atendimento.getPaciente().getNome()});   
            }
        }
        horarios();
    }
    
    public void horarios(){
        AtendimentoRepositorio atendimentoRepositorio = new AtendimentoRepositorio();
        LocalDate selDate = calendarData.getSelectedDate();
        String formatted = selDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        String medico = jltMedico.getSelectedValue();
        List<Atendimento> atendimentos = atendimentoRepositorio.buscarPorDataMedico(medico, formatted);
        DefaultListModel hModel = new DefaultListModel();
        String[] list = new String [] {"08:00","08:30","09:00","09:30","10:00","10:30","11:00","11:30 ","12:00",
            "12:30","13:30","14:00","14:30","15:00","15:30","16:00","16:30","17:00","17:30"};
        int qtdHora = list.length;
        for (int i = 0; i<qtdHora; i++){
            hModel.addElement(list[i]);
        }
        if(atendimentos == null){
            jltHora.setModel(hModel);
            Thread.currentThread().stop();
        }
        for (Atendimento atendimento: atendimentos){
            for(int i = 0; i<qtdHora; i++){
                if(atendimento.getId().getHora().equals(hModel.getElementAt(i))){
                    System.out.println("teste");
                    hModel.setElementAt("<html><p style='color:red'>"+hModel.getElementAt(i)+"</p></html>", i);
                    
                }
            }
        }
        jltHora.setModel(hModel);
    }
    
    /*@Override
    public void dispose() {
    new Login().setVisible(true);
    super.dispose();
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgendar;
    private javax.swing.JToggleButton btnAltPaciente;
    private javax.swing.JToggleButton btnAltPaciente1;
    private javax.swing.JToggleButton btnAltUsuario;
    private javax.swing.JToggleButton btnExcUsuario;
    private javax.swing.JButton btnInsPaciente;
    private javax.swing.JButton btnInsUsuario;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.github.lgooddatepicker.components.CalendarPanel calendarData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton jbData;
    private javax.swing.JRadioButton jbPaciente;
    private javax.swing.JList<String> jltHora;
    private javax.swing.JList<String> jltMedico;
    private javax.swing.JLabel lblCpfPaciente;
    private javax.swing.JLabel lblCpfUsuario;
    private javax.swing.JTable tbAtendimento;
    private javax.swing.JTable tbPacientes;
    private javax.swing.JTable tbUsuarios;
    private javax.swing.JTextField txtCpfPaciente;
    private javax.swing.JTextField txtCpfUsuario;
    private javax.swing.JTextField txtData;
    // End of variables declaration//GEN-END:variables
}
